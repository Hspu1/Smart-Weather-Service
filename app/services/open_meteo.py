import asyncio
from datetime import datetime
from typing import Annotated, Dict, Any

from httpx import AsyncClient, RequestError, HTTPStatusError
from fastapi import Depends, HTTPException

from app.backend import GeographicalCoordinates


OPEN_METEO_URL = "https://api.open-meteo.com/v1/forecast"


# async def fetch_data(data: Annotated[GeographicalCoordinates, Depends()]) -> Dict[str, Any]:
async def fetch_data(lat, lon):
    params = {
        "latitude": lat,
        "longitude": lon,
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—â—É—â–µ–Ω–∏–µ, –ø–æ–≥–æ–¥–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –¥–∞–≤–ª–µ–Ω–∏–µ
        "current": "temperature_2m,apparent_temperature,weather_code,relative_humidity_2m,pressure_msl",
        # –ü–æ—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –≤–µ—Ç–µ—Ä (—Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ—Ä—ã–≤—ã)
        "hourly": "wind_speed_10m,wind_direction_10m,wind_gusts_10m",
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –≤–æ—Å—Ö–æ–¥, –∑–∞–∫–∞—Ç, –º–∞–∫—Å/–º–∏–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        "daily": "sunrise,sunset,temperature_2m_max,temperature_2m_min",
        "timezone": "auto",
        "forecast_days": 1,  # –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        "temperature_unit": "celsius",
        "wind_speed_unit": "kmh",
        "precipitation_unit": "mm",
        "timeformat": "iso8601"
    }

    # 0: "–Ø—Å–Ω–æ",
    # 1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
    # 2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    # 3: "–ü–∞—Å–º—É—Ä–Ω–æ",
    # 45: "–¢—É–º–∞–Ω",
    # 48: "–ò–∑–º–æ—Ä–æ–∑—å",
    # 51: "–õ–µ–∫–∞—è –º–æ—Ä–æ—Å—å",
    # 53: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
    # 55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    # 61: "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    # 63: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
    # 65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    # 80: "–õ–∏–≤–µ–Ω—å",
    # 95: "–ì—Ä–æ–∑–∞"

    try:
        async with AsyncClient(timeout=30.0) as client:
            response = await client.get(OPEN_METEO_URL, params=params)
            response.raise_for_status()
            return response.json()

    except RequestError as e:
        raise HTTPException(
            status_code=503,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Open-Meteo: {str(e)}"
        )
    except HTTPStatusError as e:
        raise HTTPException(
            status_code=502,
            detail=f"Open-Meteo –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.status_code}"
        )


async def main():
    data = await fetch_data(55.7558, 37.6176)
    return print(data)


if __name__ == '__main__':
    asyncio.run(main())


def get_wind_direction(degrees):
    directions = ["–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"]
    index = round(degrees / 45) % 8
    return directions[index]


def get_weather_description(code):
    weather_codes = {
        0: "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§",
        2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ",
        3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è",
        45: "–¢—É–º–∞–Ω üå´",
        48: "–ò–∑–º–æ—Ä–æ–∑—å üå´",
        51: "–õ–µ–∫–∞—è –º–æ—Ä–æ—Å—å üåß",
        53: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåß",
        55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåß",
        61: "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß",
        63: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß",
        65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
        80: "–õ–∏–≤–µ–Ω—å ‚õà",
        95: "–ì—Ä–æ–∑–∞ ‚õà"
    }
    return weather_codes[code]


def get_humidity_status(humidity):
    if humidity < 30:
        return "—Å—É—Ö–æ–π –≤–æ–∑–¥—É—Ö (–Ω–æ—Ä–º–∞: 40-60%)"
    elif 30 <= humidity <= 60:
        return "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (–Ω–æ—Ä–º–∞: 40-60%)"
    elif 61 <= humidity <= 70:
        return "–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (–Ω–æ—Ä–º–∞: 40-60%)"
    else:
        return "–≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å (–Ω–æ—Ä–º–∞: 40-60%)"


def get_pressure_status(pressure):
    match pressure:
        case _ if pressure < 980:
            return "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞: 1013 –≥–ü–∞)"
        case _ if 980 <= pressure < 1000:
            return "–ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞: 1013 –≥–ü–∞)"
        case _ if 1000 <= pressure <= 1026:
            return "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞: 1013 –≥–ü–∞)"
        case _ if 1026 < pressure <= 1040:
            return "–ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞: 1013 –≥–ü–∞)"

        case _:
            return "–≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ—Ä–º–∞: 1013 –≥–ü–∞)"


def format_time(time_str):
    dt = datetime.fromisoformat(time_str.replace('Z', '+00:00'))
    return dt.strftime("%H:%M")


async def get_weather_data(lat, lon):
    data = await fetch_data(lat, lon)

    current = data['current']
    daily = data['daily']
    hourly = data['hourly']

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Ç—Ä–µ
    current_time = current['time']
    current_hour_index = hourly['time'].index(current_time[:13] + ':00')

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    humidity_status = get_humidity_status(current['relative_humidity_2m'])
    pressure_status = get_pressure_status(current['pressure_msl'])
    wind_direction_deg = hourly['wind_direction_10m'][current_hour_index]
    wind_direction_text = get_wind_direction(wind_direction_deg)

    weather_data = {
        "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": {
            "—à–∏—Ä–æ—Ç–∞": f"{data['latitude']}¬∞ —Å.—à.",
            "–¥–æ–ª–≥–æ—Ç–∞": f"{data['longitude']}¬∞ –≤.–¥.",
            "–≤—ã—Å–æ—Ç–∞": f"{data['elevation']} –º –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è",
            "—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å": data['timezone']
        },
        "–≤—Ä–µ–º—è_–¥–∞–Ω–Ω—ã—Ö": f"{format_time(current['time'])} (–ú–°–ö)",
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": {
            "—Ç–µ–∫—É—â–∞—è": f"{current['temperature_2m']}¬∞C",
            "–æ—â—É—â–∞–µ—Ç—Å—è_–∫–∞–∫": f"{current['apparent_temperature']}¬∞C",
            "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Å–µ–≥–æ–¥–Ω—è": f"{daily['temperature_2m_max'][0]}¬∞C",
            "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_—Å–µ–≥–æ–¥–Ω—è": f"{daily['temperature_2m_min'][0]}¬∞C"
        },
        "–≤–µ—Ç–µ—Ä": {
            "—Å–∫–æ—Ä–æ—Å—Ç—å": f"{hourly['wind_speed_10m'][current_hour_index]} –∫–º/—á",
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": f"{wind_direction_text} ({wind_direction_deg}¬∞)",
            "–ø–æ—Ä—ã–≤—ã": f"{hourly['wind_gusts_10m'][current_hour_index]} –∫–º/—á"
        },
        "–≤–ª–∞–∂–Ω–æ—Å—Ç—å": f"{current['relative_humidity_2m']}% - {humidity_status}",
        "–¥–∞–≤–ª–µ–Ω–∏–µ": f"{current['pressure_msl']} –≥–ü–∞ - {pressure_status}",
        "–ø–æ–≥–æ–¥–Ω—ã–µ_—É—Å–ª–æ–≤–∏—è": get_weather_description(current['weather_code']),
        "–≤—Ä–µ–º—è_—Å–æ–ª–Ω—Ü–∞": {
            "–≤–æ—Å—Ö–æ–¥": f"{format_time(daily['sunrise'][0])} –ú–°–ö",
            "–∑–∞–∫–∞—Ç": f"{format_time(daily['sunset'][0])} –ú–°–ö"
        }
    }

    return weather_data
